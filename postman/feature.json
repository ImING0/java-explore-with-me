{
	"info": {
		"_postman_id": "70939854-c1e5-4697-9846-c5106c120a22",
		"name": "Explore with me\" Api комментарии",
		"description": "Коллекция для тестирования функциональновсти комментирования",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27224183"
	},
	"item": [
		{
			"name": "validation",
			"item": [
				{
					"name": "Попытка создать комментарий без текста",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let comment;\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        event = await api.publishEvent(event.id);\r",
									"        let commentator = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", commentator.id);\r",
									"        pm.collectionVariables.set(\"eid\", event.id);\r",
									"        comment = { text: \"\" };\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(comment),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(400);   \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/comment",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comment"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								},
								{
									"key": "eventId",
									"value": "{{eid}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Проверка входных данных."
		},
		{
			"name": "403 Forbidden",
			"item": [
				{
					"name": "Попытка написать комментарий к неопубликованному событию",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let comment;\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        let commentator = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", commentator.id);\r",
									"        pm.collectionVariables.set(\"eid\", event.id);\r",
									"        comment = rnd.getComment();\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(comment),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 403 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(403);   \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/comment",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comment"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								},
								{
									"key": "eventId",
									"value": "{{eid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Попытка изменить чужой комментарий",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let updatedComment;\r",
									"    try {\r",
									"        const initiator = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
									"        event = await api.publishEvent(event.id);\r",
									"        pm.collectionVariables.set(\"eid\", event.id);\r",
									"        const secondCommentator = await api.addUser(rnd.getUser()); \r",
									"        const triedCommentator = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", triedCommentator.id); // будет менять комм второго \r",
									"        await api.addCommentByUser(initiator.id, event.id, rnd.getComment());\r",
									"        const secomdComment = await api.addCommentByUser(secondCommentator.id, event.id, rnd.getComment());\r",
									"        pm.collectionVariables.set(\"commId\", secomdComment.id);\r",
									"        await api.addCommentByUser(triedCommentator.id, event.id, rnd.getComment());\r",
									"        updatedComment = rnd.getComment();\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"    \r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(updatedComment),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 403 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(403);   \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/comment/:commId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comment",
								":commId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								},
								{
									"key": "eventId",
									"value": "{{eid}}"
								},
								{
									"key": "commId",
									"value": "{{commId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Попытка закрепить комментарий не инициатором события",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const initiator = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
									"        event = await api.publishEvent(event.id);\r",
									"        pm.collectionVariables.set(\"eid\", event.id);\r",
									"        const secondCommentator = await api.addUser(rnd.getUser()); \r",
									"        const triedCommentator = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", triedCommentator.id); // Будет пытаться закрепить чужой комментарий\r",
									"        await api.addCommentByUser(initiator.id, event.id, rnd.getComment());\r",
									"        const secomdComment = await api.addCommentByUser(secondCommentator.id, event.id, rnd.getComment());\r",
									"        pm.collectionVariables.set(\"commId\", secomdComment.id);\r",
									"        await api.addCommentByUser(triedCommentator.id, event.id, rnd.getComment());\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 403 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(403);   \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/comment/:commId/pin?pinned=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comment",
								":commId",
								"pin"
							],
							"query": [
								{
									"key": "pinned",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								},
								{
									"key": "eventId",
									"value": "{{eid}}"
								},
								{
									"key": "commId",
									"value": "{{commId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Comments",
			"item": [
				{
					"name": "users",
					"item": [
						{
							"name": "добавление комментария авторизованным пользователем, не владельцем события",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let comment;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        event = await api.publishEvent(event.id);\r",
											"        let commentator = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", commentator.id);\r",
											"        pm.collectionVariables.set(\"eid\", event.id);\r",
											"        comment = rnd.getComment();\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(comment),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(201);   \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"const commentatorId = pm.variables.get(\"uid\");\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    // Проверяем, что ID комментатора в ответе соответствует ID комментатора в запросе\r",
											"    pm.expect(target.commentator.id).to.eql(commentatorId, 'ID комментатора в ответе должен соответствовать ID комментатора в запросе');\r",
											"\r",
											"    // Проверяем, что текст комментария в ответе такой же, как в запросе\r",
											"    pm.expect(target.text).to.eql(source.text, 'Текст комментария в ответе должен быть таким же, как в запросе');\r",
											"\r",
											"    // Проверяем, что commentatorRole равно AUTHORIZED\r",
											"    pm.expect(target.commentatorRole).to.eql(\"AUTHORIZED\", 'commentatorRole должно быть AUTHORIZED');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Ответ должен содержать поля: id, eventId, text, commentator, commentatorRole, pinned, createdOn\", function () {\r",
											"    pm.expect(target).to.have.property(\"id\");\r",
											"    pm.expect(target).to.have.property(\"eventId\");\r",
											"    pm.expect(target).to.have.property(\"text\");\r",
											"    pm.expect(target).to.have.property(\"commentator\");\r",
											"    pm.expect(target).to.have.property(\"commentatorRole\");\r",
											"    pm.expect(target).to.have.property(\"pinned\");\r",
											"    pm.expect(target).to.have.property(\"createdOn\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/:eventId/comment",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId",
										"comment"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}"
										},
										{
											"key": "eventId",
											"value": "{{eid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление комментария от инициатора события",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let comment;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", user.id);\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
											"        event = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"eid\", event.id);\r",
											"        comment = rnd.getComment();\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(comment),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(201);   \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"const commentatorId = pm.variables.get(\"uid\");\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    // Проверяем, что ID комментатора в ответе соответствует ID комментатора в запросе\r",
											"    pm.expect(target.commentator.id).to.eql(commentatorId, 'ID комментатора в ответе должен соответствовать ID комментатора в запросе');\r",
											"\r",
											"    // Проверяем, что текст комментария в ответе такой же, как в запросе\r",
											"    pm.expect(target.text).to.eql(source.text, 'Текст комментария в ответе должен быть таким же, как в запросе');\r",
											"\r",
											"    // Проверяем, что commentatorRole равно INITIATOR\r",
											"    pm.expect(target.commentatorRole).to.eql(\"INITIATOR\", 'commentatorRole должно быть INITIATOR');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Ответ должен содержать поля: id, eventId, text, commentator, commentatorRole, pinned, createdOn\", function () {\r",
											"    pm.expect(target).to.have.property(\"id\");\r",
											"    pm.expect(target).to.have.property(\"eventId\");\r",
											"    pm.expect(target).to.have.property(\"text\");\r",
											"    pm.expect(target).to.have.property(\"commentator\");\r",
											"    pm.expect(target).to.have.property(\"commentatorRole\");\r",
											"    pm.expect(target).to.have.property(\"pinned\");\r",
											"    pm.expect(target).to.have.property(\"createdOn\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/:eventId/comment",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId",
										"comment"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}"
										},
										{
											"key": "eventId",
											"value": "{{eid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение события с 3 комментариями",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    \r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        event = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"eid\", event.id);\r",
											"        const secondCommentator = await api.addUser(rnd.getUser());\r",
											"        const triedCommentator = await api.addUser(rnd.getUser());\r",
											"        await api.addCommentByUser(initiator.id, event.id, rnd.getComment());\r",
											"        await api.addCommentByUser(secondCommentator.id, event.id, rnd.getComment());\r",
											"        await api.addCommentByUser(triedCommentator.id, event.id, rnd.getComment());\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"    \r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);   \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Количество комментариев должно быть равно 3\", function () {\r",
											"    pm.expect(target.comments).to.be.an('array').that.has.lengthOf(3);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/events/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{eid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Поменять текст комментария пользователем, который его оставил",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let updatedComment;\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        event = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"eid\", event.id);\r",
											"        const secondCommentator = await api.addUser(rnd.getUser()); //Он будет менять свой комм\r",
											"        pm.collectionVariables.set(\"uid\", secondCommentator.id);\r",
											"        const triedCommentator = await api.addUser(rnd.getUser());\r",
											"        await api.addCommentByUser(initiator.id, event.id, rnd.getComment());\r",
											"        const secomdComment = await api.addCommentByUser(secondCommentator.id, event.id, rnd.getComment());\r",
											"        pm.collectionVariables.set(\"commId\", secomdComment.id);\r",
											"        await api.addCommentByUser(triedCommentator.id, event.id, rnd.getComment());\r",
											"        updatedComment = rnd.getComment();\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"    \r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(updatedComment),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);   \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"const commentatorId = pm.variables.get(\"uid\");\r",
											"\r",
											"// Проверка совпадения идентификатора комментатора\r",
											"pm.test(\"Идентификатор комментатора соответствует ожидаемому\", function () {\r",
											"    pm.expect(target.commentator.id).to.eql(commentatorId);\r",
											"});\r",
											"\r",
											"// Проверка совпадения текста комментария\r",
											"pm.test(\"Текст комментария соответствует отправленному\", function () {\r",
											"    pm.expect(target.text).to.eql(source.text);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/:eventId/comment/:commId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId",
										"comment",
										":commId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}"
										},
										{
											"key": "eventId",
											"value": "{{eid}}"
										},
										{
											"key": "commId",
											"value": "{{commId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Закрепить комментарий другого пользователя инициатором события",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", initiator.id);\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        event = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"eid\", event.id);\r",
											"        const secondCommentator = await api.addUser(rnd.getUser()); \r",
											"        const triedCommentator = await api.addUser(rnd.getUser());\r",
											"        await api.addCommentByUser(initiator.id, event.id, rnd.getComment());\r",
											"        const secomdComment = await api.addCommentByUser(secondCommentator.id, event.id, rnd.getComment());\r",
											"        pm.collectionVariables.set(\"commId\", secomdComment.id);\r",
											"        await api.addCommentByUser(triedCommentator.id, event.id, rnd.getComment());\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);   \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"const initiator = pm.variables.get(\"uid\");\r",
											"\r",
											"\r",
											"// Проверка закрепленности \r",
											"pm.test(\"закрепленность комментария соответствует отправленному параметру\", function () {\r",
											"    pm.expect(target.pinned).to.eql(true);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/:eventId/comment/:commId/pin?pinned=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId",
										"comment",
										":commId",
										"pin"
									],
									"query": [
										{
											"key": "pinned",
											"value": "true"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}"
										},
										{
											"key": "eventId",
											"value": "{{eid}}"
										},
										{
											"key": "commId",
											"value": "{{commId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "удаление комментария пользователем(сокрытие)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        event = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"eid\", event.id);\r",
											"        const secondCommentator = await api.addUser(rnd.getUser()); \r",
											"        pm.collectionVariables.set(\"uid\", secondCommentator.id);\r",
											"        const triedCommentator = await api.addUser(rnd.getUser());\r",
											"        await api.addCommentByUser(initiator.id, event.id, rnd.getComment());\r",
											"        const secomdComment = await api.addCommentByUser(secondCommentator.id, event.id, rnd.getComment());\r",
											"        pm.collectionVariables.set(\"commId\", secomdComment.id);\r",
											"        await api.addCommentByUser(triedCommentator.id, event.id, rnd.getComment());\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const responseData = pm.response.json();\r",
											"\r",
											"pm.test(\"Поля commentator, commentatorRole, createdOn должны быть null, текст 'Удалено пользователем'\", function() {\r",
											"    pm.expect(responseData.commentator).to.be.null;\r",
											"    pm.expect(responseData.commentatorRole).to.be.null;\r",
											"    pm.expect(responseData.createdOn).to.be.null;\r",
											"    pm.expect(responseData.text).to.eql(\"Удалено пользователем\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/:eventId/comment/:commId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId",
										"comment",
										":commId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}"
										},
										{
											"key": "eventId",
											"value": "{{eid}}"
										},
										{
											"key": "commId",
											"value": "{{commId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Удалить комментарий инициатор события под своим постом",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", initiator.id); // Инициатор будет удалять чужой комментарий под своим постом\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        event = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"eid\", event.id);\r",
											"        const secondCommentator = await api.addUser(rnd.getUser()); \r",
											"        const triedCommentator = await api.addUser(rnd.getUser());\r",
											"        await api.addCommentByUser(initiator.id, event.id, rnd.getComment());\r",
											"        const secomdComment = await api.addCommentByUser(secondCommentator.id, event.id, rnd.getComment());\r",
											"        pm.collectionVariables.set(\"commId\", secomdComment.id);\r",
											"        await api.addCommentByUser(triedCommentator.id, event.id, rnd.getComment());\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const responseData = pm.response.json();\r",
											"\r",
											"pm.test(\"Поля commentator, commentatorRole, createdOn должны быть null, текст 'Удалено пользователем'\", function() {\r",
											"    pm.expect(responseData.commentator).to.be.null;\r",
											"    pm.expect(responseData.commentatorRole).to.be.null;\r",
											"    pm.expect(responseData.createdOn).to.be.null;\r",
											"    pm.expect(responseData.text).to.eql(\"Удалено инициатором\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/:eventId/comment/:commId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId",
										"comment",
										":commId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}"
										},
										{
											"key": "eventId",
											"value": "{{eid}}"
										},
										{
											"key": "commId",
											"value": "{{commId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "admin",
					"item": [
						{
							"name": "Редактирование чужого комментария админом",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let updatedComment;\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        event = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"eid\", event.id);\r",
											"        const secondCommentator = await api.addUser(rnd.getUser()); \r",
											"        const triedCommentator = await api.addUser(rnd.getUser());\r",
											"        await api.addCommentByUser(initiator.id, event.id, rnd.getComment());\r",
											"        const secomdComment = await api.addCommentByUser(secondCommentator.id, event.id, rnd.getComment());\r",
											"        pm.collectionVariables.set(\"commId\", secomdComment.id);\r",
											"        await api.addCommentByUser(triedCommentator.id, event.id, rnd.getComment());\r",
											"        updatedComment = rnd.getComment();\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"    \r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(updatedComment),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);   \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"const commentId = pm.variables.get(\"commId\");\r",
											"\r",
											"// Проверка совпадения идентификатора комментария\r",
											"pm.test(\"Идентификатор комментария соответствует ожидаемому\", function () {\r",
											"    pm.expect(target.id.toString()).to.eql(commentId.toString());\r",
											"});\r",
											"\r",
											"\r",
											"// Проверка совпадения текста комментария\r",
											"pm.test(\"Текст комментария соответствует отправленному\", function () {\r",
											"    pm.expect(target.text).to.eql(source.text);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/events/:eventId/comment/:commId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"events",
										":eventId",
										"comment",
										":commId"
									],
									"variable": [
										{
											"key": "eventId",
											"value": "{{eid}}"
										},
										{
											"key": "commId",
											"value": "{{commId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление(скрытие) комментария любого пользователя администратором",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        event = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"eid\", event.id);\r",
											"        const secondCommentator = await api.addUser(rnd.getUser()); \r",
											"        const triedCommentator = await api.addUser(rnd.getUser());\r",
											"        await api.addCommentByUser(initiator.id, event.id, rnd.getComment());\r",
											"        const secomdComment = await api.addCommentByUser(secondCommentator.id, event.id, rnd.getComment());\r",
											"        pm.collectionVariables.set(\"commId\", secomdComment.id);\r",
											"        await api.addCommentByUser(triedCommentator.id, event.id, rnd.getComment());\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"    \r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const responseData = pm.response.json();\r",
											"const commId  = pm.collectionVariables.get(\"commId\");\r",
											"\r",
											"pm.test(\"Поля id, commentator, commentatorRole, createdOn должны быть null, текст 'Удалено администратором'\", function() {\r",
											"    pm.expect(responseData.id.toString()).to.be.eql(commId.toString());\r",
											"    pm.expect(responseData.commentator).to.be.null;\r",
											"    pm.expect(responseData.commentatorRole).to.be.null;\r",
											"    pm.expect(responseData.createdOn).to.be.null;\r",
											"    pm.expect(responseData.text).to.eql(\"Удалено администратором\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/events/:eventId/comment/:commId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"events",
										":eventId",
										"comment",
										":commId"
									],
									"variable": [
										{
											"key": "eventId",
											"value": "{{eid}}"
										},
										{
											"key": "commId",
											"value": "{{commId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"API = class {",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
					"        this.baseUrl = baseUrl;",
					"        this.pm = postman;",
					"        this._verbose = verbose;",
					"    }",
					"",
					"    async addUser(user, verbose=null) {",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
					"    }",
					"",
					"    async addCategory(category, verbose=null) {",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
					"    }",
					"",
					"    async addEvent(userId, event, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
					"    }",
					"",
					"    async addCommentByUser(userId, eventId, comment, verbose=null) {",
					"    return this.post(\"/users/\" + userId + \"/events/\" + eventId + \"/comment\", comment, \"Ошибка при добавлении нового комментария: \", verbose);",
					"}",
					"",
					"",
					"    async addCompilation(compilation, verbose=null) {",
					"        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);",
					"    }",
					"",
					"    async publishParticipationRequest(eventId, userId, verbose=null) {",
					"        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);",
					"    }",
					"",
					"    async publishEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
					"    }",
					"    ",
					"    async rejectEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);",
					"    }",
					"",
					"    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
					"        return this.patch('/users/' + userId + '/events/' + eventId + '/requests/', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);",
					"    }",
					"",
					"    async findCategory(catId, verbose=null) {",
					"        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);",
					"    }",
					"",
					"    async findCompilation(compId, verbose=null) {",
					"        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);",
					"    }",
					"",
					"    async findEvent(eventId, verbose=null) {",
					"        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);",
					"    }",
					"",
					"    async findUser(userId, verbose=null) {",
					"        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);",
					"    }",
					"",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
					"        return new Promise((resolve, reject) => {",
					"            verbose = verbose == null ? this._verbose : verbose;",
					"",
					"            const request = {",
					"                url: this.baseUrl + path,",
					"                method: method,",
					"                body: body == null ? \"\" : JSON.stringify(body),",
					"                header: { \"Content-Type\": \"application/json\" },",
					"            };",
					"",
					"            if(verbose) {",
					"                console.log(\"Отправляю запрос: \", request);",
					"            }",
					"",
					"            try {",
					"                this.pm.sendRequest(request, (error, response) => {",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {",
					"                        let err = error ? error : JSON.stringify(response.json());",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
					"",
					"                        reject(new Error(errorText + err));",
					"                    }",
					"",
					"                    if(verbose) {",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
					"                    }",
					"",
					"                    resolve(response.json());",
					"                });",
					"            } catch(err) {",
					"                if(verbose) {",
					"                    console.error(errorText, err);",
					"                }",
					"                return Promise.reject(err);",
					"            }",
					"        });",
					"    }",
					"};",
					"",
					"RandomUtils = class {",
					"    constructor() {}",
					"",
					"    getUser() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')",
					"        };",
					"    }",
					"",
					"    getCategory() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 100).toString()",
					"        };",
					"    }",
					"",
					"    getEvent(categoryId) {",
					"        return {",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
					"            category: categoryId,",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"            eventDate: this.getFutureDateTime(),",
					"            location: {",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
					"            },",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"        }",
					"    }",
					"",
					"    getComment() {",
					"        return {",
					"            text: pm.variables.replaceIn('{{$randomLoremParagraph}}')",
					"        };",
					"    }",
					"",
					"    getCompilation(...eventIds) {",
					"        return {",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),",
					"            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            events: eventIds",
					"        };",
					"    }",
					"",
					"",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
					"        let moment = require('moment');",
					"",
					"        let m = moment();",
					"        m.add(hourShift, 'hour');",
					"        m.add(minuteShift, 'minute');",
					"        m.add(yearShift, 'year');",
					"",
					"        return m.format('YYYY-MM-DD HH:mm:ss');",
					"    }",
					"",
					"    getWord(length = 1) {",
					"        let result = '';",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
					"        const charactersLength = characters.length;",
					"        let counter = 0;",
					"        while (counter < length) {",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));",
					"            counter += 1;",
					"        }",
					"        return result;",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "catid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "request_body",
			"value": ""
		},
		{
			"key": "mail",
			"value": ""
		},
		{
			"key": "response",
			"value": ""
		},
		{
			"key": "usersCount",
			"value": 1,
			"type": "number"
		},
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "catname",
			"value": ""
		},
		{
			"key": "uid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "eid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "compid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "toCheck",
			"value": ""
		},
		{
			"key": "newDataToSet",
			"value": ""
		},
		{
			"key": "uid1",
			"value": ""
		},
		{
			"key": "reqid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catId",
			"value": ""
		},
		{
			"key": "confirmedRequests",
			"value": ""
		},
		{
			"key": "responseArr",
			"value": ""
		},
		{
			"key": "source1",
			"value": ""
		},
		{
			"key": "source2",
			"value": ""
		},
		{
			"key": "fromId",
			"value": "0"
		},
		{
			"key": "source",
			"value": ""
		},
		{
			"key": "commId",
			"value": "",
			"type": "string"
		}
	]
}